{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Snoble.Scalambda exposing
    ( Response, HighLowRequest, ListOfStringsRequest, RequestType(..), Request
    , responseDecoder, highLowRequestDecoder, listOfStringsRequestDecoder, requestDecoder
    , toResponseEncoder, toHighLowRequestEncoder, toListOfStringsRequestEncoder, toRequestEncoder
    )

{-| ProtoBuf module: `Snoble.Scalambda`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.9.0
  - the following specification file: `src/main/proto/simple.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Response, HighLowRequest, ListOfStringsRequest, RequestType, Request


# Decoder

@docs responseDecoder, highLowRequestDecoder, listOfStringsRequestDecoder, requestDecoder


# Encoder

@docs toResponseEncoder, toHighLowRequestEncoder, toListOfStringsRequestEncoder, toRequestEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Response` message
-}
type alias Response =
    { first : Int
    , second : String
    }


{-| `HighLowRequest` message
-}
type alias HighLowRequest =
    { high : String
    , low : Int
    }


{-| `ListOfStringsRequest` message
-}
type alias ListOfStringsRequest =
    { parts : List String
    }


{-| RequestType
-}
type RequestType
    = RequestTypeHlRequest HighLowRequest
    | RequestTypeStrings ListOfStringsRequest


{-| `Request` message
-}
type alias Request =
    { requestType : Maybe RequestType
    }



-- DECODER


{-| `Response` decoder
-}
responseDecoder : Decode.Decoder Response
responseDecoder =
    Decode.message (Response 0 "")
        [ Decode.optional 1 Decode.int32 setFirst
        , Decode.optional 2 Decode.string setSecond
        ]


{-| `HighLowRequest` decoder
-}
highLowRequestDecoder : Decode.Decoder HighLowRequest
highLowRequestDecoder =
    Decode.message (HighLowRequest "" 0)
        [ Decode.optional 1 Decode.string setHigh
        , Decode.optional 2 Decode.int32 setLow
        ]


{-| `ListOfStringsRequest` decoder
-}
listOfStringsRequestDecoder : Decode.Decoder ListOfStringsRequest
listOfStringsRequestDecoder =
    Decode.message (ListOfStringsRequest [])
        [ Decode.repeated 1 Decode.string .parts setParts
        ]


{-| `Request` decoder
-}
requestDecoder : Decode.Decoder Request
requestDecoder =
    Decode.message (Request Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map RequestTypeHlRequest highLowRequestDecoder )
            , ( 2, Decode.map RequestTypeStrings listOfStringsRequestDecoder )
            ]
            setRequestType
        ]



-- ENCODER


{-| `Response` encoder
-}
toResponseEncoder : Response -> Encode.Encoder
toResponseEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.first )
        , ( 2, Encode.string model.second )
        ]


{-| `HighLowRequest` encoder
-}
toHighLowRequestEncoder : HighLowRequest -> Encode.Encoder
toHighLowRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.high )
        , ( 2, Encode.int32 model.low )
        ]


{-| `ListOfStringsRequest` encoder
-}
toListOfStringsRequestEncoder : ListOfStringsRequest -> Encode.Encoder
toListOfStringsRequestEncoder model =
    Encode.message
        [ ( 1, Encode.list Encode.string model.parts )
        ]


toRequestTypeEncoder : RequestType -> ( Int, Encode.Encoder )
toRequestTypeEncoder model =
    case model of
        RequestTypeHlRequest value ->
            ( 1, toHighLowRequestEncoder value )

        RequestTypeStrings value ->
            ( 2, toListOfStringsRequestEncoder value )


{-| `Request` encoder
-}
toRequestEncoder : Request -> Encode.Encoder
toRequestEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toRequestTypeEncoder model.requestType
        ]



-- SETTERS


setFirst : a -> { b | first : a } -> { b | first : a }
setFirst value model =
    { model | first = value }


setSecond : a -> { b | second : a } -> { b | second : a }
setSecond value model =
    { model | second = value }


setHigh : a -> { b | high : a } -> { b | high : a }
setHigh value model =
    { model | high = value }


setLow : a -> { b | low : a } -> { b | low : a }
setLow value model =
    { model | low = value }


setParts : a -> { b | parts : a } -> { b | parts : a }
setParts value model =
    { model | parts = value }


setRequestType : a -> { b | requestType : a } -> { b | requestType : a }
setRequestType value model =
    { model | requestType = value }
