{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Snoble.Scalambda exposing
    ( Response, Request
    , responseDecoder, requestDecoder
    , toResponseEncoder, toRequestEncoder
    )

{-| ProtoBuf module: `Snoble.Scalambda`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.9.0
  - the following specification file: `src/main/proto/simple.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Response, Request


# Decoder

@docs responseDecoder, requestDecoder


# Encoder

@docs toResponseEncoder, toRequestEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Response` message
-}
type alias Response =
    { first : Int
    , second : String
    }


{-| `Request` message
-}
type alias Request =
    { high : String
    , low : Int
    }



-- DECODER


{-| `Response` decoder
-}
responseDecoder : Decode.Decoder Response
responseDecoder =
    Decode.message (Response 0 "")
        [ Decode.optional 1 Decode.int32 setFirst
        , Decode.optional 2 Decode.string setSecond
        ]


{-| `Request` decoder
-}
requestDecoder : Decode.Decoder Request
requestDecoder =
    Decode.message (Request "" 0)
        [ Decode.optional 1 Decode.string setHigh
        , Decode.optional 2 Decode.int32 setLow
        ]



-- ENCODER


{-| `Response` encoder
-}
toResponseEncoder : Response -> Encode.Encoder
toResponseEncoder model =
    Encode.message
        [ ( 1, Encode.int32 model.first )
        , ( 2, Encode.string model.second )
        ]


{-| `Request` encoder
-}
toRequestEncoder : Request -> Encode.Encoder
toRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.high )
        , ( 2, Encode.int32 model.low )
        ]



-- SETTERS


setFirst : a -> { b | first : a } -> { b | first : a }
setFirst value model =
    { model | first = value }


setSecond : a -> { b | second : a } -> { b | second : a }
setSecond value model =
    { model | second = value }


setHigh : a -> { b | high : a } -> { b | high : a }
setHigh value model =
    { model | high = value }


setLow : a -> { b | low : a } -> { b | low : a }
setLow value model =
    { model | low = value }
